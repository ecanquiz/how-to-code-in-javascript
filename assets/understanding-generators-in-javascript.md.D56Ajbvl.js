import{_ as e,c as a,o as n,V as s}from"./chunks/framework.C80zbCY-.js";const k=JSON.parse('{"title":"Comprender Generadores en JavaScript","description":"","frontmatter":{},"headers":[],"relativePath":"understanding-generators-in-javascript.md","filePath":"understanding-generators-in-javascript.md"}'),i={name:"understanding-generators-in-javascript.md"},r=s(`<h1 id="comprender-generadores-en-javascript" tabindex="-1">Comprender Generadores en JavaScript <a class="header-anchor" href="#comprender-generadores-en-javascript" aria-label="Permalink to &quot;Comprender Generadores en JavaScript&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">INFO</p><p>La fuente original (en ingles) de este tutorial se encuentra <a href="https://www.digitalocean.com/community/tutorials/understanding-generators-in-javascript" target="_blank" rel="noreferrer">aquí</a></p></div><h2 id="introduccion" tabindex="-1">Introducción <a class="header-anchor" href="#introduccion" aria-label="Permalink to &quot;Introducción&quot;">​</a></h2><p>En <a href="https://262.ecma-international.org/6.0/" target="_blank" rel="noreferrer">ECMAScript 2015</a>, se introdujeron generadores en el lenguaje JavaScript. Un <em>generador</em> es un proceso que se puede pausar y reanudar y puede generar múltiples valores. Un generador en JavaScript consta de una <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*" target="_blank" rel="noreferrer">función generadora</a>, que devuelve un objeto <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator" target="_blank" rel="noreferrer"><code>Generator</code></a> iterable.</p><p>Los generadores pueden mantener el estado, proporcionando una forma eficiente de crear iteradores, y son capaces de manejar flujos de datos infinitos, que pueden usarse para implementar un desplazamiento infinito en la interfaz de una aplicación web, para operar con datos de ondas de sonido y más. Además, cuando se usan con <a href="https://www.digitalocean.com/community/tutorials/how-to-write-asynchronous-code-in-node-js#using-promises-for-concise-asynchronous-programming" target="_blank" rel="noreferrer"><code>Promises</code></a>, los generadores pueden imitar la funcionalidad <code>async/await</code>, lo que nos permite manejar <a href="https://www.digitalocean.com/community/tutorials/how-to-write-asynchronous-code-in-node-js" target="_blank" rel="noreferrer">código asincrónico</a> de una manera más sencilla y legible. Aunque <code>async/await</code> es una forma más frecuente de lidiar con casos de uso asincrónicos simples y comunes, como obtener datos de una API, los generadores tienen características más avanzadas que hacen que valga la pena aprender a usarlos.</p><p>En este artículo, cubriremos cómo crear funciones generadoras, cómo iterar sobre objetos <code>Generator</code>, la diferencia entre <code>yield</code> y <code>return</code> dentro de un generador y otros aspectos del trabajo con generadores.</p><h2 id="funciones-generadoras" tabindex="-1">Funciones Generadoras <a class="header-anchor" href="#funciones-generadoras" aria-label="Permalink to &quot;Funciones Generadoras&quot;">​</a></h2><p>Una <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*" target="_blank" rel="noreferrer">función generadora</a> es una función que devuelve un objeto <code>Generator</code> y se define mediante la palabra clave <code>function</code> seguida de un asterisco (<code>*</code>), como se muestra a continuación:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Generator function declaration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generatorFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span></code></pre></div><p>Ocasionalmente, verá el asterisco junto al nombre de la función, en lugar de la palabra clave de la función, como <code>function *generatorFunction()</code>. Esto funciona igual, pero <code>función*</code> es una sintaxis más aceptada.</p><p>Las funciones generadoras también se pueden definir en una expresión, como las <a href="./how-to-define-functions-in-javascript.html">funciones</a> regulares:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Generator function expression</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generatorFunction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span></code></pre></div><p>Los generadores pueden incluso ser los métodos de un <a href="./understanding-objects-in-javascript.html">objeto</a> o <a href="./understanding-classes-in-javascript.html">clase</a>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Generator as the method of an object</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> generatorObj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generatorMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Generator as the method of a class</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GeneratorClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generatorMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Los ejemplos a lo largo de este artículo utilizarán la sintaxis de declaración de función generadora.</p><div class="info custom-block"><p class="custom-block-title">Nota</p><p>A diferencia de las funciones normales, los generadores no se pueden construir con la palabra clave <code>new</code> ni se pueden usar junto con <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="noreferrer">funciones de flecha</a>.</p></div><p>Ahora que sabes cómo declarar funciones generadoras, veamos los objetos <code>Generator</code> iterables que devuelven.</p><h2 id="generator-objects" tabindex="-1">Generator Objects <a class="header-anchor" href="#generator-objects" aria-label="Permalink to &quot;Generator Objects&quot;">​</a></h2>`,18),o=[r];function t(c,l,d,p,h,u){return n(),a("div",null,o)}const m=e(i,[["render",t]]);export{k as __pageData,m as default};
