import{_ as s,c as a,o as i,V as e}from"./chunks/framework.C80zbCY-.js";const g=JSON.parse('{"title":"C√≥mo Escribir Declaraciones Condicionales en JavaScript","description":"","frontmatter":{},"headers":[],"relativePath":"how-to-write-conditional-statements-in-javascript.md","filePath":"how-to-write-conditional-statements-in-javascript.md"}'),n={name:"how-to-write-conditional-statements-in-javascript.md"},l=e(`<h1 id="como-escribir-declaraciones-condicionales-en-javascript" tabindex="-1">C√≥mo Escribir Declaraciones Condicionales en JavaScript <a class="header-anchor" href="#como-escribir-declaraciones-condicionales-en-javascript" aria-label="Permalink to &quot;C√≥mo Escribir Declaraciones Condicionales en JavaScript&quot;">‚Äã</a></h1><div class="info custom-block"><p class="custom-block-title">INFO</p><p>La fuente original (en ingles) de este tutorial se encuentra <a href="https://www.digitalocean.com/community/tutorials/how-to-write-conditional-statements-in-javascript" target="_blank" rel="noreferrer">aqu√≠</a></p></div><h2 id="introduccion" tabindex="-1">Introducci√≥n <a class="header-anchor" href="#introduccion" aria-label="Permalink to &quot;Introducci√≥n&quot;">‚Äã</a></h2><p>En programaci√≥n, habr√° muchas ocasiones en las que querr√°s ejecutar diferentes bloques de c√≥digo dependiendo de la entrada del usuario u otros factores.</p><p>Por ejemplo, es posible que desee enviar un formulario si cada campo se completa correctamente, pero es posible que desee evitar que se env√≠e ese formulario si faltan algunos campos obligatorios. Para lograr tareas como estas contamos con <strong>declaraciones condicionales</strong>, que son una parte integral de todos los lenguajes de programaci√≥n.</p><p>Las declaraciones condicionales ejecutan una acci√≥n espec√≠fica basada en los resultados de un desenlace de <a href="./understanding-data-types.html#booleans"><code>true</code> o <code>false</code></a>.</p><p>Algunos ejemplos de declaraciones condicionales de JavaScript que puede ver incluyen:</p><ul><li>Verificar la ubicaci√≥n de un usuario y muestrar el idioma correcto seg√∫n el pa√≠s</li><li>Enviar un formulario a hacer <em>submit</em> o mostrar advertencias junto a los campos obligatorios que faltan</li><li>Abrir un men√∫ desplegable en un evento de clic o cerrar un men√∫ desplegable si ya est√° abierto</li><li>Mostrar el sitio web de un proveedor de alcohol si el usuario tiene m√°s de la edad legal para beber</li><li>Mostrar el formulario de reserva de un hotel, pero no si el hotel est√° reservado</li></ul><p>Las declaraciones condicionales son parte de la l√≥gica, la toma de decisiones o el control de flujo de un programa de computadora. Puedes comparar una declaraci√≥n condicional con un libro &quot;<a href="https://en.wikipedia.org/wiki/Choose_Your_Own_Adventure" target="_blank" rel="noreferrer">Elige Tu Propia Aventura</a>&quot; o con un diagrama de flujo.</p><p>En este tutorial, repasaremos las declaraciones condicionales, incluidas las palabras clave <code>if</code>, <code>else</code> y <code>else if</code>. Tambi√©n cubriremos el operador ternario.</p><h2 id="declaracion-if" tabindex="-1">Declaraci√≥n <code>if</code> <a class="header-anchor" href="#declaracion-if" aria-label="Permalink to &quot;Declaraci√≥n \`if\`&quot;">‚Äã</a></h2><p>La m√°s fundamental de las declaraciones condicionales es la declaraci√≥n <code>if</code>. Una declaraci√≥n <code>if</code> evaluar√° si una declaraci√≥n es verdadera o falsa y solo se ejecutar√° si la declaraci√≥n devuelve <code>true</code>. El bloque de c√≥digo se ignorar√° en el caso de un resultado <code>false</code> y el programa pasar√° a la siguiente secci√≥n.</p><p>Una declaraci√≥n <code>if</code> se escribe con la palabra clave <code>if</code>, seguida de una condici√≥n entre par√©ntesis, con el c√≥digo que se ejecutar√° entre llaves. En resumen, se puede escribir como <code>if () {}</code>.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (condition) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// code that will execute if condition is true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>El contenido de una declaraci√≥n <code>if</code> tiene sangr√≠a y las llaves que contienen el bloque de c√≥digo a ejecutar no terminan en punto y coma, como un bloque de funciones.</p><p>Como ejemplo, consideremos una aplicaci√≥n de compras. Digamos que, para la funcionalidad de esta aplicaci√≥n, un usuario que ha depositado una cierta cantidad de fondos en su cuenta le gustar√≠a comprar un art√≠culo en la tienda.</p><p>üìÉ<code>shop.js</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Set balance and price of item</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> balance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> jeans</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 40</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Check if there are enough funds to purchase item</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (jeans </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> balance) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;You have enough money to purchase the item!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">You</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> have enough money to purchase the item!</span></span></code></pre></div><p>Tenemos un saldo balance de <code>500</code> y queremos comprar un par de jeans por <code>40</code>. Usando el operador menor o igual, podemos verificar si el precio de los jeans es menor o igual a la cantidad de fondos que tenemos. Dado que <code>jeans &lt;= balance</code> se eval√∫a como <code>true</code>, la condici√≥n pasar√° y se ejecutar√° el bloque de c√≥digo.</p><p>En un nuevo ejemplo, crearemos un nuevo art√≠culo de tienda que cueste m√°s que el saldo balance.</p><p>üìÉ<code>shop.js</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Set balance and price of item</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> balance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> phone</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 600</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Check if there is enough funds to purchase item</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (phone </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> balance) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;You have enough money to purchase the item!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Este ejemplo no tendr√° resultados, ya que <code>phone &lt;= balance</code> se eval√∫a como <code>false</code>. El bloque de c√≥digo simplemente ser√° ignorado y el programa pasar√° a la siguiente l√≠nea.</p><h2 id="declaracion-else" tabindex="-1">Declaraci√≥n <code>Else</code> <a class="header-anchor" href="#declaracion-else" aria-label="Permalink to &quot;Declaraci√≥n \`Else\`&quot;">‚Äã</a></h2><p>Con las declaraciones <code>if</code>, solo ejecutamos c√≥digo cuando una declaraci√≥n se eval√∫a como <code>true</code>, pero a menudo querremos que suceda algo m√°s si la condici√≥n falla.</p><p>Por ejemplo, es posible que queramos mostrar un mensaje que le indique al usuario qu√© campos se completaron correctamente si un formulario no se envi√≥ correctamente. En este caso, utilizar√≠amos la instrucci√≥n <code>else</code>, que es el c√≥digo que se ejecutar√° si la condici√≥n original no se cumple.</p><p>La declaraci√≥n <code>else</code> se escribe despu√©s de la declaraci√≥n <code>if</code> y no tiene ninguna condici√≥n entre par√©ntesis. Aqu√≠ est√° la sintaxis de una declaraci√≥n b√°sica <code>if...else</code>.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (condition) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// code that will execute if condition is true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// code that will execute if condition is false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Usando el mismo ejemplo anterior, podemos agregar un mensaje para mostrar si los fondos en la cuenta son demasiado bajos.</p><p>üìÉ<code>shop.js</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Set balance and price of item</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> balance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> phone</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 600</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Check if there is enough funds to purchase item</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (phone </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> balance) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;You have enough money to purchase the item!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;You do not have enough money in your account to purchase this item.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">You</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> do not have enough money in your account to purchase this item.</span></span></code></pre></div><p>Dado que la condici√≥n <code>if</code> no tuvo √©xito, el c√≥digo pasa a lo que hay en la declaraci√≥n <code>else</code>.</p><p>Esto puede resultar muy √∫til para mostrar advertencias o permitirle al usuario saber qu√© acciones tomar para seguir adelante. Por lo general, se requerir√° una acci√≥n tanto en caso de √©xito como de fracaso, por lo que <code>if...else</code> es m√°s com√∫n que una declaraci√≥n <code>if</code> en solitario.</p><h2 id="declaracion-else-if" tabindex="-1">Declaraci√≥n <code>Else if</code> <a class="header-anchor" href="#declaracion-else-if" aria-label="Permalink to &quot;Declaraci√≥n \`Else if\`&quot;">‚Äã</a></h2><p>Con <code>if</code> y <code>else</code> podemos ejecutar bloques de c√≥digo dependiendo de si una condici√≥n es <code>true</code> o <code>false</code>. Sin embargo, a veces podemos tener m√∫ltiples condiciones y resultados posibles y necesitar m√°s de dos opciones. Una forma de hacerlo es con la declaraci√≥n <code>else if</code>, que puede evaluar m√°s de dos resultados posibles.</p><p>A continuaci√≥n se muestra un ejemplo b√°sico de un bloque de c√≥digo que contiene una declaraci√≥n <code>if</code>, varias declaraciones <code>else if</code> y una declaraci√≥n <code>else</code> en caso de que ninguna de las condiciones se eval√∫e como <code>true</code>.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (condition a) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// code that will execute if condition a is true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (condition b) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// code that will execute if condition b is true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (condition c) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// code that will execute if condition c is true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// code that will execute if all above conditions are false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>JavaScript intentar√° ejecutar todas las declaraciones en orden y, si ninguna de ellas tiene √©xito, utilizar√° de forma predeterminada el bloque <code>else</code>.</p><p>Puede tener tantas declaraciones como sea necesario. En el caso de muchas otras declaraciones <code>if</code>, podr√≠a preferirse la <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch" target="_blank" rel="noreferrer">declaraci√≥n <code>switch</code></a> para facilitar la lectura.</p><p>Como ejemplo de varias declaraciones <code>else if</code>, podemos crear una aplicaci√≥n de calificaci√≥n que generar√° una calificaci√≥n con letras basada en una puntuaci√≥n de 100.</p><p>Los requisitos de esta aplicaci√≥n son los siguientes:</p><ul><li>Calificaci√≥n de 90 y superior es una A</li><li>Calificaci√≥n de 80 a 89 es una B</li><li>Calificaci√≥n de 70 a 79 es una C</li><li>Calificaci√≥n de 60 a 69 es una D</li><li>Calificaci√≥n de 59 o menos es una F</li></ul><p>A continuaci√≥n, crearemos un conjunto simple de declaraciones <code>if</code>, <code>else</code> y <code>else if</code>, y las probaremos con una calificaci√≥n determinada.</p><p>üìÉ<code>grades.js</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Set the current grade of the student</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> grade </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 87</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Check if grade is an A, B, C, D, or F</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (grade </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 90</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (grade </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;B&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (grade </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 70</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;C&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (grade </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;D&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;F&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">B</span></span></code></pre></div><p>En nuestro ejemplo, primero comprobamos la puntuaci√≥n m√°s alta, que ser√° mayor o igual a <code>90</code>. Despu√©s de eso, las declaraciones <code>else if</code> comprobar√°n si hay m√°s de <code>80</code>, <code>70</code> y <code>60</code> hasta llegar al valor predeterminado <code>els</code>e de una calificaci√≥n reprobatoria. .</p><p>Aunque nuestro valor de calificaci√≥n de <code>87</code> tambi√©n es v√°lido t√©cnicamente para <code>C</code>, <code>D</code> y <code>F</code>, las afirmaciones se detendr√°n en el primero que tenga √©xito. Por lo tanto, obtenemos una salida de <code>B</code>, que es la primera coincidencia.</p><h2 id="operador-ternario" tabindex="-1">Operador Ternario <a class="header-anchor" href="#operador-ternario" aria-label="Permalink to &quot;Operador Ternario&quot;">‚Äã</a></h2><p>El <strong>operador ternario</strong>, tambi√©n conocido como operador condicional, se utiliza como abreviatura de una declaraci√≥n <code>if...else</code>.</p><p>Un operador ternario se escribe con la sintaxis de un signo de interrogaci√≥n (<code>?</code>) seguido de dos puntos (<code>:</code>), como se muestra a continuaci√≥n.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(condition) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> expression on </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> expression on </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span></code></pre></div><p>En la declaraci√≥n anterior, la condici√≥n se escribe primero, seguida de <code>?</code>. La primera expresi√≥n se ejecutar√° en caso de <code>true</code> y la segunda expresi√≥n se ejecutar√° en caso de <code>false</code>. Es muy similar a una declaraci√≥n <code>if...else</code>, con una sintaxis m√°s compacta.</p><p>En este ejemplo, crearemos un programa que verifique si un usuario tiene <code>21</code> a√±os o m√°s. Si es as√≠, imprimir√° <code>&quot;You may enter.&quot;</code> en la consola. Si no es as√≠, imprimir√° <code>&quot;You may not enter.&quot;</code> en la consola.</p><p>üìÉ<code>age.js</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Set age of user</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Place result of ternary operation in a variable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> oldEnough</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 21</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;You may enter.&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;You may not enter.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Print output</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">oldEnough;</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;You may not enter.&#39;</span></span></code></pre></div><p>Dado que la <code>age</code> del usuario era menor de <code>21</code> a√±os, el mensaje fallido se envi√≥ a la consola. El equivalente <code>if...else</code> a esto ser√≠a <code>&quot;You may enter.&quot;</code> en la declaraci√≥n <code>if</code> y <code>&quot;You may not enter.&quot;</code> en la declaraci√≥n <code>else</code>.</p><h2 id="conclusion" tabindex="-1">Conclusi√≥n <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;Conclusi√≥n&quot;">‚Äã</a></h2><p>Las declaraciones condicionales nos proporcionan control de flujo para determinar el resultado de nuestros programas. Son uno de los pilares fundamentales de la programaci√≥n y se pueden encontrar en pr√°cticamente todos los lenguajes de programaci√≥n.</p><p>En este art√≠culo, aprendimos c√≥mo usar las palabras clave <code>if</code>, <code>else</code> y <code>else if</code>, y cubrimos el anidamiento de declaraciones y el uso del operador ternario.</p>`,63),t=[l];function o(p,c,d,h,r,k){return i(),a("div",null,t)}const E=s(n,[["render",o]]);export{g as __pageData,E as default};
