import{_ as s,c as a,o as i,V as e}from"./chunks/framework.C80zbCY-.js";const g=JSON.parse('{"title":"C√≥mo Definir Funciones en JavaScript","description":"","frontmatter":{},"headers":[],"relativePath":"how-to-define-functions-in-javascript.md","filePath":"how-to-define-functions-in-javascript.md"}'),n={name:"how-to-define-functions-in-javascript.md"},l=e(`<h1 id="como-definir-funciones-en-javascript" tabindex="-1">C√≥mo Definir Funciones en JavaScript <a class="header-anchor" href="#como-definir-funciones-en-javascript" aria-label="Permalink to &quot;C√≥mo Definir Funciones en JavaScript&quot;">‚Äã</a></h1><div class="info custom-block"><p class="custom-block-title">INFO</p><p>La fuente original (en ingles) de este tutorial se encuentra <a href="https://www.digitalocean.com/community/tutorials/how-to-define-functions-in-javascript" target="_blank" rel="noreferrer">aqu√≠</a></p></div><h2 id="introduccion" tabindex="-1">Introducci√≥n <a class="header-anchor" href="#introduccion" aria-label="Permalink to &quot;Introducci√≥n&quot;">‚Äã</a></h2><p>Una <strong>funci√≥n</strong> es un bloque de c√≥digo que realiza una acci√≥n o devuelve un valor. Las funciones son c√≥digos personalizados definidos por programadores que son reutilizables y, por lo tanto, pueden hacer que sus programas sean m√°s modulares y eficientes.</p><p>En este tutorial, aprenderemos varias formas de definir una funci√≥n, llamar a una funci√≥n y usar par√°metros de funci√≥n en JavaScript.</p><h2 id="definiendo-una-funcion" tabindex="-1">Definiendo una Funci√≥n <a class="header-anchor" href="#definiendo-una-funcion" aria-label="Permalink to &quot;Definiendo una Funci√≥n&quot;">‚Äã</a></h2><p>Las funciones se definen o declaran con la palabra clave <code>function</code>. A continuaci√≥n se muestra la sintaxis de una funci√≥n en JavaScript.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nameOfFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Code to be executed</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>La declaraci√≥n comienza con la palabra clave <code>function</code>, seguida del nombre de la funci√≥n. Los nombres de funciones siguen las mismas reglas que las variables: pueden contener letras, n√∫meros, guiones bajos y signos de d√≥lar, y con frecuencia se escriben en <a href="./understanding-syntax-and-code-structure-in-javascript.html#identificadores">camel case</a>. El nombre va seguido de un conjunto de par√©ntesis, que se pueden utilizar para par√°metros opcionales. El c√≥digo de la funci√≥n est√° contenido entre llaves, al igual que una <a href="./for-loops-for-of-loops-and-for-in-loops-in-javascript.html">declaraci√≥n <code>for</code></a> o una <a href="./how-to-write-conditional-statements-in-javascript.html">declaraci√≥n <code>if</code></a>.</p><p>En nuestro primer ejemplo, haremos una <strong>declaraci√≥n de funci√≥n</strong> para imprimir una declaraci√≥n de saludo en la consola.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Initialize greeting function</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, World!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Aqu√≠ tenemos el c√≥digo para imprimir <code>Hello, World!</code> a la consola contenida dentro de la funci√≥n <code>greet()</code>. Sin embargo, no suceder√° nada y no se ejecutar√° ning√∫n c√≥digo hasta que <strong>invoquemos</strong> o llamemos a la funci√≥n. Puede invocar una funci√≥n escribiendo el nombre de la funci√≥n seguido del par√©ntesis.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Invoke the function</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>Ahora los juntaremos, definiremos nuestra funci√≥n e invocaremos.</p><p>üìÉ<code>greet.js</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Initialize greeting function</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, World!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Invoke the function</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>Con la llamada a <code>greet();</code>, la funci√≥n se ejecutar√° y recibiremos el mensaje <code>Hello, World!</code> como salida del programa.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hello,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> World!</span></span></code></pre></div><p>Ahora tenemos nuestro c√≥digo <code>greet()</code> contenido en una funci√≥n y podemos reutilizarlo tantas veces como queramos.</p><p>Usando par√°metros, podemos hacer que el c√≥digo sea m√°s din√°mico.</p><h2 id="parametros-de-funcion" tabindex="-1">Par√°metros de Funci√≥n <a class="header-anchor" href="#parametros-de-funcion" aria-label="Permalink to &quot;Par√°metros de Funci√≥n&quot;">‚Äã</a></h2><p>En nuestro archivo <code>greet.js</code>, creamos una funci√≥n b√°sica que imprime <code>Hello, World</code> en la consola. Usando par√°metros, podemos agregar funcionalidad adicional que har√° que el c√≥digo sea m√°s flexible. Los <strong>par√°metros</strong> son entradas que se pasan a funciones como nombres y se comportan como variables locales.</p><p>Cuando un usuario inicia sesi√≥n en una aplicaci√≥n, es posible que deseemos que el programa lo salude por su nombre, en lugar de simplemente decir &quot;Hello, World!&quot;.</p><p>Agregaremos un par√°metro a nuestra funci√≥n, llamado <code>name</code>, para representar el nombre de la persona a la que se saluda.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Initialize custom greeting function</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Hello, \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}!\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>El nombre de la funci√≥n es <code>greet</code> y ahora tenemos un √∫nico par√°metro dentro del par√©ntesis. El nombre del par√°metro sigue las mismas reglas que el nombre de una variable. Dentro de la funci√≥n, en lugar de una cadena est√°tica que consta de <code>Hello, World</code>, tenemos una cadena <a href="./how-to-work-with-strings-in-javascript.html#variables-en-cadenas-con-literales-de-plantilla">literal de plantilla</a> que contiene nuestro par√°metro, que ahora se comporta como una variable local.</p><p>Notar√°s que no hemos definido nuestro par√°metro <code>name</code> en ninguna parte. Le asignamos un valor cuando invocamos nuestra funci√≥n. Suponiendo que nuestro usuario se llama Sammy, llamaremos a la funci√≥n y colocaremos el nombre de usuario como <strong>argumento</strong>. El argumento es el valor real que se pasa a la funci√≥n; en este caso es la cadena <code>&quot;Sammy&quot;</code>.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Invoke greet function with &quot;Sammy&quot; as the argument</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Sammy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>El valor de <code>&quot;Sammy&quot;</code> se pasa a la funci√≥n a trav√©s del par√°metro <code>name</code>. Ahora, cada vez que se utilice <code>name</code> en toda la funci√≥n, representar√° el valor <code>&quot;Sammy&quot;</code>. Aqu√≠ est√° el c√≥digo completo.</p><p>üìÉ<code>greetSammy.js</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Initialize custom greeting function</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Hello, \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}!\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Invoke greet function with &quot;Sammy&quot; as the argument</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Sammy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>Cuando ejecutamos el programa anterior, recibiremos el siguiente resultado.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hello,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Sammy!</span></span></code></pre></div><p>Ahora tenemos un ejemplo de c√≥mo se puede reutilizar una funci√≥n. En un ejemplo del mundo real, la funci√≥n extraer√≠a el nombre de usuario de una base de datos en lugar de proporcionar directamente el nombre como valor de argumento.</p><p>Adem√°s de los par√°metros, se pueden declarar variables dentro de las funciones. Estas variables se conocen como <strong>variables locales</strong> y solo existir√°n dentro del alcance de su propio bloque de funciones. El alcance de las variables determina la accesibilidad de las variables; Las variables que se definen dentro de una funci√≥n no son accesibles desde fuera de la funci√≥n, pero se pueden usar tantas veces como se usa su funci√≥n en un programa.</p><h2 id="valores-devueltos" tabindex="-1">Valores Devueltos <a class="header-anchor" href="#valores-devueltos" aria-label="Permalink to &quot;Valores Devueltos&quot;">‚Äã</a></h2><p>Se puede utilizar m√°s de un par√°metro en una funci√≥n. Podemos pasar m√∫ltiples valores a una funci√≥n y devolver un valor. Crearemos una funci√≥n para encontrar la suma de dos valores, representados por <code>x</code> e <code>y</code>.</p><p>üìÉ<code>sum.js</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Initialize add function</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Invoke function to find the sum</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>En el programa anterior, definimos una funci√≥n con los par√°metros <code>x</code> e <code>y</code>, y luego pasamos los valores de <code>9</code> y <code>7</code> a la funci√≥n. Cuando ejecutamos el programa, recibiremos la suma de esos n√∫meros como resultado.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">16</span></span></code></pre></div><p>En este caso, con <code>9</code> y <code>7</code> pasados ‚Äã‚Äãa la funci√≥n <code>sum()</code>, el programa devolvi√≥ <code>16</code>.</p><p>Cuando se utiliza la palabra clave <code>return</code>, la funci√≥n deja de ejecutarse y se devuelve el valor de la expresi√≥n. Aunque en este caso el navegador mostrar√° el valor en la consola, no es lo mismo que usar <code>console.log()</code> para imprimir en la consola. Al invocar la funci√≥n se generar√° el valor exactamente donde se invoc√≥ la funci√≥n. Este valor se puede utilizar inmediatamente o colocar en una variable.</p><h2 id="expresiones-de-funcion" tabindex="-1">Expresiones de Funci√≥n <a class="header-anchor" href="#expresiones-de-funcion" aria-label="Permalink to &quot;Expresiones de Funci√≥n&quot;">‚Äã</a></h2><p>En la √∫ltima secci√≥n, usamos una declaraci√≥n de funci√≥n para obtener la suma de dos n√∫meros y devolver ese valor. Tambi√©n podemos crear una <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function" target="_blank" rel="noreferrer">expresi√≥n de funci√≥n</a> asignando una funci√≥n a una variable.</p><p>Usando nuestro mismo ejemplo de funci√≥n <code>add</code>, podemos aplicar directamente el valor devuelto a una variable, en este caso <code>sum</code>.</p><p>üìÉ<code>functionExpression.js</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Assign add function to sum constant</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Invoke function to find the sum</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">25</span></span></code></pre></div><p>Ahora la constante <code>sum</code> es una funci√≥n. Podemos hacer que esta expresi√≥n sea m√°s concisa convirti√©ndola en una <strong>funci√≥n an√≥nima</strong>, que es una funci√≥n sin nombre. Actualmente, nuestra funci√≥n tiene el nombre <code>add</code>, pero con las expresiones de funci√≥n no es necesario nombrar la funci√≥n y el nombre generalmente se omite.</p><p>üìÉ<code>anonymousExpression.js</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Assign function to sum constant</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Invoke function to find the sum</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">103</span></span></code></pre></div><p>En este ejemplo, eliminamos el nombre de la funci√≥n que era <code>add</code> y la convertimos en una funci√≥n an√≥nima. Se podr√≠a utilizar una expresi√≥n de funci√≥n con nombre para ayudar en la depuraci√≥n, pero normalmente se omite.</p><h2 id="funciones-de-flecha" tabindex="-1">Funciones de Flecha <a class="header-anchor" href="#funciones-de-flecha" aria-label="Permalink to &quot;Funciones de Flecha&quot;">‚Äã</a></h2><p>Hasta ahora, hemos visto c√≥mo definir funciones usando la palabra clave <code>function</code>. Sin embargo, existe un m√©todo m√°s nuevo y conciso para definir una funci√≥n conocida como <strong>expresiones de funci√≥n de flecha</strong> a partir de <a href="https://262.ecma-international.org/6.0/" target="_blank" rel="noreferrer">ECMAScript 6</a>. Las funciones de flecha, como se las conoce com√∫nmente, se representan mediante un signo igual seguido de un signo mayor que: <code>=&gt;</code>.</p><p>Las funciones de flecha son siempre funciones an√≥nimas y un tipo de expresi√≥n de funci√≥n. Podemos crear un ejemplo b√°sico para encontrar el producto de dos n√∫meros.</p><p>üìÉ<code>arrowFunction.js</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Define multiply function</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> multiply</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Invoke function to find product</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">multiply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">120</span></span></code></pre></div><p>En lugar de escribir la palabra clave <code>function</code>, usamos la flecha <code>=&gt;</code> para indicar una funci√≥n. De lo contrario, funciona de manera similar a una expresi√≥n de funci√≥n regular, con algunas diferencias avanzadas que puede leer en <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions#arrow_functions" target="_blank" rel="noreferrer">Funciones de Flecha en Mozilla Developer Network</a>.</p><p>En el caso de un solo par√°metro, se pueden excluir los par√©ntesis. En este ejemplo, elevamos <code>x</code> al cuadrado, lo que solo requiere que se pase un n√∫mero como argumento. Se han omitido los par√©ntesis.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Define square function</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> square</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Invoke function to find product</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">square</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">64</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">Nota</p><p>En el caso de que no haya par√°metros, se requiere un conjunto vac√≠o de par√©ntesis <code>()</code> en las funciones de flecha.</p></div><p>Con estos ejemplos particulares que solo consisten en una declaraci√≥n <code>return</code>, las funciones de flecha permiten reducir a√∫n m√°s la sintaxis. Si la funci√≥n es un <code>return</code> de una sola l√≠nea, se pueden omitir tanto las llaves como la declaraci√≥n <code>return</code>, como se ve en el siguiente ejemplo.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Define square function</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> square</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Invoke function to find product</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">square</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">100</span></span></code></pre></div><p>Estos tres tipos de sintaxis dan como resultado la misma salida. Generalmente es una cuesti√≥n de preferencia o de est√°ndares de codificaci√≥n de la empresa decidir c√≥mo estructurar√° sus propias funciones.</p><h2 id="conclusion" tabindex="-1">Conclusi√≥n <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;Conclusi√≥n&quot;">‚Äã</a></h2><p>En este tutorial, cubrimos declaraciones de funciones y expresiones de funciones, devoluci√≥n de valores de funciones, asignaci√≥n de valores de funciones a variables y funciones de flecha de ES6.</p><p>Las funciones son bloques de c√≥digo que devuelven un valor o realizan una acci√≥n, lo que hace que los programas sean escalables y modulares.</p>`,72),t=[l];function p(o,r,h,d,c,k){return i(),a("div",null,t)}const E=s(n,[["render",p]]);export{g as __pageData,E as default};
