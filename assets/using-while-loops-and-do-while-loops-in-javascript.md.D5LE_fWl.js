import{_ as s,c as i,o as a,V as e}from"./chunks/framework.C80zbCY-.js";const g=JSON.parse('{"title":"Usando Bucles While y Bucles Do...While en JavaScript","description":"","frontmatter":{},"headers":[],"relativePath":"using-while-loops-and-do-while-loops-in-javascript.md","filePath":"using-while-loops-and-do-while-loops-in-javascript.md"}'),n={name:"using-while-loops-and-do-while-loops-in-javascript.md"},l=e(`<h1 id="usando-bucles-while-y-bucles-do-while-en-javascript" tabindex="-1">Usando Bucles While y Bucles Do...While en JavaScript <a class="header-anchor" href="#usando-bucles-while-y-bucles-do-while-en-javascript" aria-label="Permalink to &quot;Usando Bucles While y Bucles Do...While en JavaScript&quot;">‚Äã</a></h1><div class="info custom-block"><p class="custom-block-title">INFO</p><p>La fuente original (en ingles) de este tutorial se encuentra <a href="https://www.digitalocean.com/community/tutorials/using-while-loops-and-do-while-loops-in-javascript" target="_blank" rel="noreferrer">aqu√≠</a></p></div><h2 id="introduccion" tabindex="-1">Introducci√≥n <a class="header-anchor" href="#introduccion" aria-label="Permalink to &quot;Introducci√≥n&quot;">‚Äã</a></h2><p>La automatizaci√≥n es la t√©cnica de hacer que un sistema funcione autom√°ticamente; En programaci√≥n, utilizamos <strong>bucles</strong> para automatizar tareas repetitivas. Los bucles son una de las caracter√≠sticas m√°s √∫tiles de los lenguajes de programaci√≥n, y en este art√≠culo aprenderemos sobre los bucles <code>while</code> y <code>do... while</code> en JavaScript.</p><p>Las declaraciones <code>while</code> y <code>do... while</code> en JavaScript son similares a las <a href="./how-to-write-conditional-statements-in-javascript.html">declaraciones condicionales</a>, que son bloques de c√≥digo que se ejecutar√°n si una condici√≥n especificada resulta <a href="./understanding-data-types.html#booleans"><code>true</code></a>. A diferencia de una declaraci√≥n <code>if</code>, que solo se eval√∫a una vez, un bucle se ejecutar√° varias veces hasta que la condici√≥n ya no se eval√∫e como <code>true</code>.</p><p>Otro tipo com√∫n de bucle que encontrar√° es la <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for" target="_blank" rel="noreferrer">declaraci√≥n <code>for</code></a>, que se ejecuta un n√∫mero determinado de veces. Los bucles <code>while</code> y <code>do... while</code> se basan condicionalmente y, por lo tanto, no es necesario saber de antemano cu√°ntas veces se ejecutar√° el bucle.</p><h2 id="bucle-while" tabindex="-1">Bucle While <a class="header-anchor" href="#bucle-while" aria-label="Permalink to &quot;Bucle While&quot;">‚Äã</a></h2><p>En JavaScript, una declaraci√≥n <code>while</code> es un bucle que se ejecuta siempre que la condici√≥n especificada se eval√∫e como <code>true</code>.</p><p>La sintaxis es muy similar a una declaraci√≥n <code>if</code>, como se ve a continuaci√≥n.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (condition) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// execute code as long as condition is true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>La declaraci√≥n <code>while</code> es el bucle m√°s b√°sico para construir en JavaScript.</p><p>Como ejemplo, digamos que tenemos un acuario que tiene un l√≠mite de poblaci√≥n. Para cada iteraci√≥n del ciclo, agregaremos un pez. Una vez que el acuario tenga <code>10</code> peces, se alcanzar√° el l√≠mite de poblaci√≥n y el programa dejar√° de agregar m√°s peces.</p><p>üìÉ<code>aquarium.js</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Set population limit of aquarium to 10</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> popLimit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Start off with 0 fish</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fish </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Initiate while loop to run until fish reaches population limit</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (fish </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> popLimit) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// add one fish for each iteration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	fish</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;There&#39;s room for &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (popLimit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fish) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; more fish.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Una vez que ejecutemos el programa anterior, recibiremos el siguiente resultado, que muestra la iteraci√≥n del programa a trav√©s del ciclo <code>while</code> hasta que las condiciones ya no se eval√∫an como <code>true</code>.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">There</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;s room for 9 more fish.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">There&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> room for </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> more fish.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">There</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;s room for 7 more fish.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">There&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> room for </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> more fish.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">There</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;s room for 5 more fish.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">There&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> room for </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> more fish.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">There</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;s room for 3 more fish.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">There&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> room for </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> more fish.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">There</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;s room for 1 more fish.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">There&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> room for </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> more fish.</span></span></code></pre></div><p>En nuestro ejemplo, configuramos nuestro bucle <code>while</code> para que se ejecute siempre que la cantidad de peces sea menor que el l√≠mite de poblaci√≥n del acuario. Para cada iteraci√≥n, se agrega un pez al acuario hasta llenar los <code>10</code> lugares. En ese momento, el bucle deja de ejecutarse.</p><h2 id="bucles-infinitos" tabindex="-1">Bucles Infinitos <a class="header-anchor" href="#bucles-infinitos" aria-label="Permalink to &quot;Bucles Infinitos&quot;">‚Äã</a></h2><p>Un <strong>bucle infinito</strong>, como su nombre indica, es un bucle que seguir√° ejecut√°ndose para siempre. Si accidentalmente realiza un bucle infinito, podr√≠a bloquear su navegador o computadora. Es importante estar atento a los bucles infinitos para poder evitarlos.</p><p>Un bucle infinito com√∫n ocurre cuando la condici√≥n de la declaraci√≥n <code>while</code> se establece en <code>true</code>. A continuaci√≥n se muestra un ejemplo de c√≥digo que se ejecutar√° para siempre. No es necesario probar ning√∫n bucle infinito.</p><p>üìÉ<code>infiniteLoop.js</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Initiate an infinite loop</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// execute code forever</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Se ejecutar√° un bucle infinito para siempre, pero el programa se puede finalizar con la palabra clave <code>break</code>.</p><p>En el siguiente ejemplo, agregaremos una declaraci√≥n <code>if</code> al bucle <code>while</code> y, cuando se cumpla esa condici√≥n, finalizaremos el bucle con <code>break</code>.</p><p>üìÉ<code>polarBears.js</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Set a condition to true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> iceCapsAreMelting</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> polarBears </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Initiate infinite loop</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (iceCapsAreMelting) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`There are \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">polarBears</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} polar bears.\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  polarBears</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Terminate infinite loop when following condition is true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (polarBears </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;There are no polar bears left.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  	break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Cuando ejecutamos el c√≥digo anterior, el resultado ser√° el siguiente.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">There</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> are </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> polar bears.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">There</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> are </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> polar bears.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">There</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> are </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> polar bears.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">There</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> are </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> polar bears.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">There</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> are </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> polar bears.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">There</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> are no polar bears left.</span></span></code></pre></div><p>Tenga en cuenta que este no es necesariamente un m√©todo pr√°ctico para crear y finalizar un bucle, pero <code>break</code> es una palabra clave √∫til que debe tener en cuenta.</p><h2 id="bucle-do-while" tabindex="-1">Bucle Do...While <a class="header-anchor" href="#bucle-do-while" aria-label="Permalink to &quot;Bucle Do...While&quot;">‚Äã</a></h2><p>Ya aprendimos sobre el bucle <code>while</code>, que ejecuta un bloque de c√≥digo mientras una condici√≥n especificada sea verdadera. A partir de eso est√° la declaraci√≥n <code>do... while</code>, que es muy similar a <code>while</code> con la principal diferencia de que un bucle <code>do... while</code> siempre se ejecutar√° una vez, incluso si la condici√≥n nunca es verdadera.</p><p>A continuaci√≥n demostraremos la sintaxis del bucle <code>do... while</code>.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// execute code</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (condition);</span></span></code></pre></div><p>Como puede ver, la parte <code>do</code> del bucle viene primero y le sigue <code>while (condition)</code>. El bloque de c√≥digo se ejecutar√° y luego se probar√° la condici√≥n tal como est√° en un bucle <code>while</code> normal.</p><p>Para probar esto, podemos establecer una variable en <code>0</code>, incrementarla dentro de la declaraci√≥n <code>do</code> y establecer nuestra condici√≥n en <code>false</code>.</p><p>üìÉ<code>falseCondition.js</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Set variable to 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// Increment variable by 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1</span></span></code></pre></div><p>Nuestro resultado fue <code>1</code>, lo que significa que el bloque de c√≥digo recorri√≥ el bucle una vez (desde <code>0</code>) antes de ser detenido por una condici√≥n <code>while</code> fallida.</p><p>Si bien se tiene en cuenta que el bucle se repetir√° al menos una vez, el bucle <code>do... while</code> se puede utilizar para los mismos fines que un bucle <code>while</code>.</p><h2 id="conclusion" tabindex="-1">Conclusi√≥n <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;Conclusi√≥n&quot;">‚Äã</a></h2><p>En este tutorial, aprendimos sobre el bucle <code>while</code>, el bucle <code>do... while</code> y los bucles infinitos en JavaScript.</p><p>La automatizaci√≥n de tareas repetitivas es una parte extremadamente importante de la programaci√≥n y estos bucles pueden ayudar a que sus programas sean m√°s eficientes y concisos.</p><p>Para obtener m√°s informaci√≥n, lea sobre los bucles <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while" target="_blank" rel="noreferrer"><code>while</code></a> y <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/do...while" target="_blank" rel="noreferrer"><code>do... while</code></a> en Mozilla Developer Network.</p>`,44),t=[l];function p(h,o,r,c,k,d){return a(),i("div",null,t)}const E=s(n,[["render",p]]);export{g as __pageData,E as default};
