import{_ as e,c as a,o as s,V as n}from"./chunks/framework.C80zbCY-.js";const k=JSON.parse('{"title":"Comprender Parámetros Predeterminados en JavaScript","description":"","frontmatter":{},"headers":[],"relativePath":"understanding-default-parameters-in-javascript.md","filePath":"understanding-default-parameters-in-javascript.md"}'),i={name:"understanding-default-parameters-in-javascript.md"},t=n(`<h1 id="comprender-parametros-predeterminados-en-javascript" tabindex="-1">Comprender Parámetros Predeterminados en JavaScript <a class="header-anchor" href="#comprender-parametros-predeterminados-en-javascript" aria-label="Permalink to &quot;Comprender Parámetros Predeterminados en JavaScript&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">INFO</p><p>La fuente original (en ingles) de este tutorial se encuentra <a href="https://www.digitalocean.com/community/tutorials/understanding-default-parameters-in-javascript" target="_blank" rel="noreferrer">aquí</a></p></div><h2 id="introduccion" tabindex="-1">Introducción <a class="header-anchor" href="#introduccion" aria-label="Permalink to &quot;Introducción&quot;">​</a></h2><p>En <a href="https://262.ecma-international.org/6.0/" target="_blank" rel="noreferrer">ECMAScript 2015</a>, los parámetros de función predeterminados se introdujeron en el lenguaje <a href="./">JavaScript</a>. Estos permiten a los desarrolladores inicializar una <a href="./how-to-define-functions-in-javascript.html">función</a> con valores predeterminados si los argumentos no se proporcionan a la llamada de función. Inicializar los parámetros de función de esta manera hará que sus funciones sean más fáciles de leer y menos propensas a errores, y proporcionará un comportamiento predeterminado para sus funciones. Esto le ayudará a evitar errores que surgen al pasar argumentos <code>undefined</code> y desestructurar objetos que no existen.</p><p>En este artículo, revisará la diferencia entre parámetros y argumentos, aprenderá cómo usar parámetros predeterminados en funciones, verá formas alternativas de admitir parámetros predeterminados y aprenderá qué tipos de valores y expresiones se pueden usar como parámetros predeterminados. También verá ejemplos que demuestran cómo funcionan los parámetros predeterminados en JavaScript.</p><h2 id="argumentos-y-parametros" tabindex="-1">Argumentos y Parámetros <a class="header-anchor" href="#argumentos-y-parametros" aria-label="Permalink to &quot;Argumentos y Parámetros&quot;">​</a></h2><p>Antes de explicar los parámetros de función predeterminados, es importante saber qué es lo que los parámetros pueden establecer de forma predeterminada. Por esta razón, primero revisaremos la diferencia entre argumentos y parámetros en una función. Si desea obtener más información sobre esta distinción, consulte nuestro artículo anterior de la <a href="./">serie JavaScript</a>, <a href="./how-to-define-functions-in-javascript.html">Cómo Definir Funciones en JavaScript </a>.</p><p>En el siguiente bloque de código, creará una función que devuelve el cubo de un número determinado, definido como <code>x</code>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Define a function to cube a number</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cube</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>La variable <code>x</code> en este ejemplo es un <em>parámetro</em>— una variable con nombre que se pasa a una función. Un parámetro siempre debe estar contenido en una variable y nunca debe tener un valor directo.</p><p>Ahora eche un vistazo al siguiente bloque de código, que llama a la función de <code>cube</code> que acaba de crear:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Invoke cube function</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cube</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Esto dará el siguiente resultado:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1000</span></span></code></pre></div><p>En este caso, <code>10</code> es un <em>argumento</em>— un valor que se pasa a una función cuando se invoca. A menudo, el valor también estará contenido en una variable, como en el siguiente ejemplo:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Assign a number to a variable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Invoke cube function</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cube</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number)</span></span></code></pre></div><p>Esto producirá el mismo resultado:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1000</span></span></code></pre></div><p>Si no pasa un argumento a una función que espera uno, la función usará implícitamente <code>undefined</code> como valor:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Invoke the cube function without passing an argument</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cube</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Esto devolverá:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NaN</span></span></code></pre></div><p>En este caso, <code>cube()</code> intenta calcular el valor de <code>undefined * undefined * undefined</code>, lo que da como resultado <code>NaN</code>, o <em>“not a number”</em>. Para obtener más información sobre esto, consulte la sección numérica de <a href="./understanding-data-types.html#numbers">Comprender Tipos de Datos en JavaScript</a>.</p><p>Este comportamiento automático a veces puede ser un problema. En algunos casos, es posible que desee que el parámetro tenga un valor incluso si no se pasó ningún argumento a la función. Ahí es donde resulta útil la característica de <em>parámetros predeterminados</em>, un tema que cubrirá en la siguiente sección.</p><h2 id="default-parameter-syntax" tabindex="-1">Default Parameter Syntax <a class="header-anchor" href="#default-parameter-syntax" aria-label="Permalink to &quot;Default Parameter Syntax&quot;">​</a></h2>`,25),r=[t];function o(p,l,d,c,u,h){return s(),a("div",null,r)}const g=e(i,[["render",o]]);export{k as __pageData,g as default};
